# Generated by Django 5.2.2 on 2025-09-15 13:44

import django.db.models.deletion
from django.db import migrations, models, connection


def _table_exists(table_name: str) -> bool:
    with connection.cursor() as cursor:
        tables = connection.introspection.table_names()
    return table_name in tables


def _create_sovalidateaggregate(apps, schema_editor):
    # Create the table only if it does not already exist (handles existing DBs)
    if not _table_exists('common_sovalidateaggregate'):
        SoValidateAggregate = apps.get_model('common', 'SoValidateAggregate')
        schema_editor.create_model(SoValidateAggregate)


def _drop_sovalidateaggregate(apps, schema_editor):
    # Drop the table only if it exists (safe reverse)
    if _table_exists('common_sovalidateaggregate'):
        SoValidateAggregate = apps.get_model('common', 'SoValidateAggregate')
        schema_editor.delete_model(SoValidateAggregate)


class Migration(migrations.Migration):

    dependencies = [
        ('common', '0072_drop_stale_customerpurchaseorder'),
    ]

    operations = [
        migrations.CreateModel(
            name='ItemGroupType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=100, verbose_name='Item Group Type Code')),
                ('description', models.CharField(blank=True, default='', max_length=100, verbose_name='Item Group Type Description')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('code',),
                'constraints': [models.UniqueConstraint(fields=('code',), name='unique_item_group_type')],
            },
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Program Name')),
                ('budget', models.FloatField(blank=True, null=True, verbose_name='Budget')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('name',),
                'constraints': [models.UniqueConstraint(fields=('name',), name='unique_program_name')],
            },
        ),
        migrations.CreateModel(
            name='ItemGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=100, verbose_name='Item Group Code')),
                ('description', models.CharField(blank=True, default='', max_length=100, verbose_name='Item Group Description')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='common.itemgrouptype', verbose_name='Item Group Type')),
                ('program', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='common.program', verbose_name='Program')),
            ],
            options={
                'ordering': ('code',),
                'constraints': [models.UniqueConstraint(fields=('code',), name='unique_item_group')],
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunPython(_create_sovalidateaggregate, _drop_sovalidateaggregate),
            ],
            state_operations=[
                migrations.CreateModel(
                    name='SoValidateAggregate',
                    fields=[
                        ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('period', models.DateField()),
                        ('value', models.DecimalField(decimal_places=2, max_digits=20)),
                        ('created_at', models.DateTimeField(auto_now_add=True)),
                        ('updated_at', models.DateTimeField(auto_now=True)),
                        ('company', models.ForeignKey(blank=True, limit_choices_to={'parent__isnull': True}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='so_validate_company_rows', to='common.businesspartner')),
                        ('customer', models.ForeignKey(blank=True, limit_choices_to={'parent__isnull': True}, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='so_validate_customer_rows', to='common.businesspartner')),
                        ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='so_validate_aggregates', to='common.item')),
                    ],
                    options={
                        'verbose_name': 'SO Validator Aggregate',
                        'verbose_name_plural': 'SO Validator Aggregates',
                        'indexes': [
                            models.Index(fields=['period'], name='common_sova_period_14fe9b_idx'),
                            models.Index(fields=['customer', 'period'], name='common_sova_custome_2bf57f_idx'),
                            models.Index(fields=['company', 'period'], name='common_sova_company_82c072_idx'),
                            models.Index(fields=['item', 'period'], name='common_sova_item_id_17a1e8_idx'),
                        ],
                        'unique_together': {('item', 'company', 'customer', 'period')},
                    },
                ),
            ],
        ),
    ]
