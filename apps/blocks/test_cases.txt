Manual Test Matrix: TableBlock x ProductionOrder (non-admin, non-staff)

Assumptions
- Model: production.ProductionOrder → model_name: productionorder, app_label: production
- States used: draft, approved (slugs: "draft", "approved"). Adjust to your workflow.
- Instances:
  - PO_A: linked to workflow, state=draft
  - PO_B: linked to workflow, state=approved
  - PO_C: no workflow (workflow=None)
- Fields under test: choose 2 real columns used by your TableBlock, refer to them as F1 and F2 below.
- Instance hooks: if your model defines can_user_view/change/delete(user), create variants where these return True/False to validate hook behavior.

Legend for permission codenames
- Model (base):
  - View:   production.view_productionorder
  - Add:    production.add_productionorder
  - Change: production.change_productionorder
  - Delete: production.delete_productionorder
- Field (base):
  - View:   production.view_productionorder_<field>
  - Change: production.change_productionorder_<field>
- Instance (per-state):
  - View:   production.view_productionorder_<state>
  - Change: production.change_productionorder_<state>
  - Delete: production.delete_productionorder_<state>
- Field (per-state):
  - View:   production.view_productionorder_<field>_<state>
  - Change: production.change_productionorder_<field>_<state>

Notes on behavior
- Row visibility requires BOTH base model view and (if object has a state) per-state view.
- Field visibility requires BOTH base field view and (if object has a state) per-state field view; otherwise masked as ***.
- Editing a field is allowed when BOTH base change (model + instance hook) AND base field change AND per-state field change are granted. (Instance-level per-state change may also be required by policy; include it if you want stricter gating.)
- If an object has no workflow/state, per-state checks are skipped entirely (base permissions only).

Test Cases

1) No permissions → Empty table
   - Assign: (none)
   - Expect: No rows (PO_A, PO_B, PO_C not shown due to lacking base view).

2) Base model view only → Rows without workflow only
   - Assign: production.view_productionorder
   - Expect: PO_C visible; PO_A/PO_B hidden (missing per-state view).

3) Base + per-state view (draft) → Only draft rows
   - Assign: production.view_productionorder, production.view_productionorder_draft
   - Expect: PO_A visible; PO_B hidden; PO_C visible.

4) Base + per-state view (approved) → Only approved rows
   - Assign: production.view_productionorder, production.view_productionorder_approved
   - Expect: PO_B visible; PO_A hidden; PO_C visible.

5) Base + per-state view (both states) → All rows visible
   - Assign: production.view_productionorder, production.view_productionorder_draft, production.view_productionorder_approved
   - Expect: PO_A, PO_B, PO_C all visible.

6) Instance hook denies view → Row hidden even with permissions
   - Assign: production.view_productionorder, matching per-state view for the row
   - Setup: Implement can_user_view(user)=False for a specific object (e.g., PO_A)
   - Expect: That object is not shown.

7) Field masked (missing base field view) → ***
   - Assign: production.view_productionorder (+ per-state view for row if applicable)
   - Remove: production.view_productionorder_F1
   - Expect: Column F1 shows *** for PO_A/PO_B; PO_C shows *** as well (base field perm missing). F2 shows values as permitted.

8) Field masked (missing per-state field view) → ***
   - Assign: production.view_productionorder, production.view_productionorder, base field views for F1/F2
            production.view_productionorder_F1
   - Remove: production.view_productionorder_F1_draft (for draft test) or _approved (for approved test)
   - Expect: On PO_A in draft (or PO_B in approved), F1 shows ***; other fields show values.

9) Field visible with full read perms
   - Assign (draft example):
     - production.view_productionorder
     - production.view_productionorder_draft
     - production.view_productionorder_F1
     - production.view_productionorder_F1_draft
   - Expect: PO_A shows value in F1.

10) Mixed fields: F1 visible, F2 masked
    - Assign: as in (9) for F1; omit base or per-state field view for F2
    - Expect: F1 visible, F2 shows ***.

11) No workflow object ignores per-state field perms
    - Assign: production.view_productionorder, production.view_productionorder_F1 (no per-state field view assigned)
    - Expect: For PO_C (no workflow), F1 visible based on base field view alone.

12) Base change missing → Editing denied
    - Assign: production.view_productionorder (and needed view perms)
    - Remove: production.change_productionorder
    - Expect: Inline edit rejected server-side for any field (403/Permission denied JSON).

13) Instance hook denies change → Editing denied
    - Assign: production.change_productionorder, production.view_productionorder (+ read perms)
    - Setup: can_user_change(user)=False for target object
    - Expect: Inline edit rejected.

14) Field change missing (base) → Editing denied for that field
    - Assign: production.change_productionorder, production.view_productionorder, production.view_productionorder_F1
    - Remove: production.change_productionorder_F1
    - Expect: Editing F1 rejected; other fields with change perms may edit.

15) Per-state field change missing → Editing denied in that state
    - Assign (draft example):
      - production.change_productionorder
      - production.view_productionorder, production.view_productionorder_draft
      - production.view_productionorder_F1, production.change_productionorder_F1
    - Remove: production.change_productionorder_F1_draft
    - Expect: Editing F1 rejected on PO_A (draft). Same operation allowed when state-specific perm is present.

16) Optional stricter rule: require per-state instance change
    - If you choose to enforce instance-level state change as well, assign:
      - production.change_productionorder_draft (for draft edits)
    - Expect: Without it, editing is denied even if per-state field change exists.

17) Full edit allowed (draft)
    - Assign:
      - production.view_productionorder, production.view_productionorder_draft
      - production.change_productionorder
      - production.view_productionorder_F1, production.change_productionorder_F1
      - production.view_productionorder_F1_draft, production.change_productionorder_F1_draft
      - (Optional stricter) production.change_productionorder_draft
    - Expect: Edit F1 succeeds on PO_A.

18) Delete denied without base delete
    - Assign: production.view_productionorder (+ state view)
    - Remove: production.delete_productionorder
    - Expect: Any delete UI/action should fail (if present), independent of state perms.

19) Delete denied without per-state delete
    - Assign: production.delete_productionorder, production.view_productionorder, production.view_productionorder_draft
    - Remove: production.delete_productionorder_draft
    - Expect: Delete on PO_A (draft) denied; allowed when per-state delete is added.

20) State transition buttons obey group and bypass settings (if rendered)
    - Ensure user is in a group allowed on a Transition from current state
    - Expect: Transition button visible and successful; otherwise hidden or rejected.

21) No workflow attached → Only base perms matter for row/fields
    - Assign: production.view_productionorder, production.view_productionorder_F1
    - Expect: PO_C row visible, F1 visible (no state perms needed). Editing requires base change + field change only.

22) Cross-related field masking (nested columns like "customer__name")
    - Assign: Base and per-state view on related model field as appropriate (if your policy applies field perms to related models)
    - Expect: Value masked (***) if user lacks read on the related field under state rules of the related instance; otherwise shown.

Admin notes for setup
- After adding/removing fields or states, run:
  - python manage.py rebuild_field_permissions --app production --model ProductionOrder
  - python manage.py rebuild_workflow_permissions --app production --model ProductionOrder
- Ensure middleware is enabled: apps.permissions.middleware.PermissionCacheMiddleware
- Use a non-staff, non-superuser account when validating.

