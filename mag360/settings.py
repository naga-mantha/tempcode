"""
Django settings for mag360 project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from email.utils import parseaddr
from pathlib import Path
import environ
import os
import sys
from django.contrib.messages import constants as msg

env = environ.Env()
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=False)

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS')


# Application definition

INSTALLED_APPS = [
    'apps.common',
    'apps.accounts',
    'apps.django_bi',
    'apps.production',
    'apps.purchase',
    'apps.planning',
    'django_extensions',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django_comments_xtd',
    'django_comments',
    "crispy_forms",
    "crispy_bootstrap5",
    'widget_tweaks',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'apps.django_bi.permissions.middleware.PermissionCacheMiddleware',
]

ROOT_URLCONF = 'mag360.urls'

_extra_template_dirs = [BASE_DIR / "apps" / "common" / "templates"]

django_bi_template_root = BASE_DIR / "apps" / "django_bi"
_extra_template_dirs.extend(
    path
    for path in django_bi_template_root.glob("*/templates")
    if path.is_dir()
)

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': _extra_template_dirs,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'apps.django_bi.utils.context_processors.sidebar_layouts',
                'apps.django_bi.utils.context_processors.branding',
            ],
        },
    },
]

WSGI_APPLICATION = 'mag360.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASE_ENGINE = env("DATABASE_ENGINE", default="django.db.backends.postgresql")

if DATABASE_ENGINE == "django.db.backends.sqlite3":
    DATABASES = {
        "default": {
            "ENGINE": DATABASE_ENGINE,
            "NAME": env("DATABASE_NAME", default=str(BASE_DIR / "db.sqlite3")),
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": DATABASE_ENGINE,
            "NAME": env("DATABASE_NAME"),
            "USER": env("DATABASE_USER"),
            "PASSWORD": env("DATABASE_PASS"),
            "HOST": env("DATABASE_HOST"),
            "PORT": env("DATABASE_PORT"),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/dist/'
STATIC_ROOT = BASE_DIR / "dist"
STATICFILES_DIRS = [
    BASE_DIR / "apps/common/dist",
]

# --- MEDIA ---
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# MAG360 SETTINGS
LOGIN_REDIRECT_URL = "layout:layout_list"
LOGOUT_REDIRECT_URL = "home"
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

AUTH_USER_MODEL = 'accounts.CustomUser'

SITE_ID = int(env('SITE_ID')) # Used by django-comments-xtd

# if not env('HOST')=="http://127.0.0.1:8000":
#     SECURE_SSL_REDIRECT = env('SECURE_SSL_REDIRECT')

# https://django-comments-xtd.readthedocs.io/en/latest/quickstart.html
COMMENTS_APP = 'django_comments_xtd'
COMMENTS_XTD_MAX_THREAD_LEVEL = 25
COMMENTS_XTD_LIST_ORDER = (
    '-thread_id',  # newest threads first
    'order',      # newest replies first within each thread
)

# CRISPY FORMS
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Django message framework (django.contrib.messages)
MESSAGE_TAGS = {
    msg.DEBUG:    'secondary',
    msg.INFO:     'info',
    msg.SUCCESS:  'success',
    msg.WARNING:  'warning',
    msg.ERROR:    'danger',    # ← map “error” → “danger”
}

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = env('EMAIL_HOST')
DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL')
SERVER_EMAIL = DEFAULT_FROM_EMAIL   # This is required so that the errors can be emailed to admins

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'formatters': {
        'simple': {
            'format': '%(levelname)s - %(asctime)s - %(name)s - %(message)s'
        },
    },

    'handlers': {
        'debug_log': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'debug.log',
            'formatter': 'simple',
        },

        "mail_admins": {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler",
            'include_html': True,
        },
    },

    'loggers': {
        # Project app loggers (captures modules under 'apps.*')
        'apps': {
            'handlers': ['debug_log'],
            'propagate': True,
            'level': 'INFO',
        },

        # Central error logger used across management commands
        'app_errors': {
            'handlers': ['debug_log', "mail_admins"],
            'propagate': True,
            'level': 'ERROR',
        },
    },
}

# Admin emails to send error logs
admin_emails = env('ADMINS')
ADMINS = tuple(parseaddr(email) for email in admin_emails.split(','))

# Permissions app settings
PERMISSIONS_STAFF_BYPASS = False  # If True, staff users can bypass permission checks

LOGIN_REQUIRED_IGNORE_PATHS = [
    r'/accounts/*',
    r'/admin/*',
]

# If True, skips the back_order recalculation in PurchaseOrderLine admin
# PURCHASE_ADMIN_SKIP_BACK_ORDER_RECALC = True

# Branding
COMPANY_FULL_NAME = env('COMPANY_FULL_NAME', default='Your Company')


